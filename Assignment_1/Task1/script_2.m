    %% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\zainq\Google Drive\Spring 2017\Data Mining\assignment1\t20-cricket-matches\t20_matches.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/02/17 18:48:18

%% Initialize variables.
filename = 't20_matches.csv';
delimiter = ',';
startRow = 2;

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[10,11,12,14,15,16,17,19,20,21,22]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

% Convert the contents of columns with dates to MATLAB datetimes using date
% format string.
try
    dates{4} = datetime(dataArray{4}, 'Format', 'dd-MMM-yyyy HH:mm:ss', 'InputFormat', 'dd-MMM-yyyy HH:mm:ss');
catch
    try
        % Handle dates surrounded by quotes
        dataArray{4} = cellfun(@(x) x(2:end-1), dataArray{4}, 'UniformOutput', false);
        dates{4} = datetime(dataArray{4}, 'Format', 'dd-MMM-yyyy HH:mm:ss', 'InputFormat', 'dd-MMM-yyyy HH:mm:ss');
    catch
        dates{4} = repmat(datetime([NaN NaN NaN]), size(dataArray{4}));
    end
end

anyBlankDates = cellfun(@isempty, dataArray{4});
anyInvalidDates = isnan(dates{4}.Hour) - anyBlankDates;
dates = dates(:,4);

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [10,11,12,14,15,16,17,19,20,21,22]);
rawCellColumns = raw(:, [1,2,3,5,6,7,8,9,13,18,23,24]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
match_details = rawCellColumns(:, 1);
result = rawCellColumns(:, 2);
scores = rawCellColumns(:, 3);
date1 = dates{:, 1};
venue = rawCellColumns(:, 4);
round1 = rawCellColumns(:, 5);
home1 = rawCellColumns(:, 6);
away = rawCellColumns(:, 7);
winner = rawCellColumns(:, 8);
win_by_runs = cell2mat(rawNumericColumns(:, 1));
win_by_wickets = cell2mat(rawNumericColumns(:, 2));
balls_remaining = cell2mat(rawNumericColumns(:, 3));
innings1 = rawCellColumns(:, 9);
innings1_runs = cell2mat(rawNumericColumns(:, 4));
innings1_wickets = cell2mat(rawNumericColumns(:, 5));
innings1_overs_batted = cell2mat(rawNumericColumns(:, 6));
innings1_overs = cell2mat(rawNumericColumns(:, 7));
innings2 = rawCellColumns(:, 10);
innings2_runs = cell2mat(rawNumericColumns(:, 8));
innings2_wickets = cell2mat(rawNumericColumns(:, 9));
innings2_overs_batted = cell2mat(rawNumericColumns(:, 10));
innings2_overs = cell2mat(rawNumericColumns(:, 11));
DL_method = rawCellColumns(:, 11);
target = rawCellColumns(:, 12);

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% date1=datenum(date1);


%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr numbers invalidThousandsSeparator thousandsRegExp me dates blankDates anyBlankDates invalidDates anyInvalidDates rawNumericColumns rawCellColumns R;